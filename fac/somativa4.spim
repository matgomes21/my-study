# Dupla
# Nome: Mateus Gomes do Nascimento
# Matrícula: 18/0106821

# Nome: Matheus Afonso de Souza
# Matrícula: 18/0127641


.data
	endl: .asciiz "\n"
	output: .asciiz "inverso = "
	inputError: .asciiz "Entradas invalidas"
	modError: .asciiz "O modulo nao eh primo"
    
.text 
main:

	# leitura do inteiro p
   	li $v0, 5
  	syscall
   	move $t0, $v0
   	
   	# leitura do inteiro a
   	li $v0, 5 
  	syscall
   	move $t1, $v0
   	
   	# caso a<=1
   	slti $t2, $t1, 2
   	beq $t2, 1, inputE
   	
   	# caso p<=1
   	slti $t2, $t0, 2
   	beq $t2, 1, inputE
   	
   	# caso a seja multiplo de p
   	div $t1, $t0
   	mfhi $t2
   	beq $t2, 0, inputE
   	
   	# inicia contador em $t2
   	li $t2, 2
   	
   	# função para verificar se p é primo
   	j prime
   	
	
inputE:
	# print do erro de entrada
	li $v0, 4
	la $a0, inputError
	syscall	
	
	# função de saída
	j exit
	
prime:
	# caso seja primo
	mul $t5, $t2, $t2
	slt $t5, $t5, $t0
	beq $t5, 0, config
	
	# modulo entre p e o contador
	div $t0, $t2
	mfhi $t3
	
	# caso não seja primo
	beq $t3, 0, primeE
	
	# incrementa o contador
	addi $t2, $t2, 1
	
	# variaveis
	li $t3, 1
	li $t4, 0
	
	# loop
	j prime
	
primeE:
	# print do erro de primo
	li $v0, 4
	la $a0, modError
	syscall	
	
	# função de saída
	j exit

config:
	# configuração para calculo do mod
	div $t1, $t0
	mfhi $t1
	move $t7, $t0
	slt $t5, $t1, $zero 
	beq $t5, 1, firstif
	j finishconfig

firstif:
	# if necessário para o calculo
	add $t1, $t1, $t0
	j finishconfig
	
finishconfig:
	# continuação da configuração
	li $t3, 0
	li $t4, 1
	j while

while:
	# cálculo do mod
	sle $t5, $t1, $zero
	beq $t5, 1, whilefinish

	div $t0, $t1
	mflo $t2
	
	mul $t5, $t2, $t1
	sub $t0, $t0, $t5
	
	move $t5, $t0
	move $t0, $t1
	move $t1, $t5
	
	mul $t5, $t2, $t4
	sub $t3, $t3, $t5
	
	move $t5, $t3
	move $t3, $t4
	move $t4, $t5
	
	# loop
	j while

whilefinish:
	# término do cálculo do mod
	slt $t5, $t3, $zero
	beq $t5, 1, secondif
	j modoutput

secondif:
	# if necessário para o calculo
	add $t3, $t3, $t7
	j modoutput	
	
modoutput:
	# print da string de resposta
	li $v0, 4
	la $a0, output
	syscall
	
	# print do numero de resposta
	li $v0, 1
	move $a0, $t3
	syscall
	
	# função de saída
	j exit

exit:	
	# print da quebra de linha
	li $v0, 4
	la $a0, endl
	syscall
	
	#exit
	li $v0, 10
	syscall
